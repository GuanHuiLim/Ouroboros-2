#version 460

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 1,rgba16f) uniform image2D inputImage;
layout (binding = 2,rgba16f) uniform image2D resultImage;

void main()
{	
 // Note: Load operations from any texel that is outside of the boundaries of the bound image will return all zeros.
	vec4 res = imageLoad(resultImage, ivec2(gl_GlobalInvocationID.xy) );
	barrier();

	float sampleScale = 1.0;
	
	vec2 uv = vec2(gl_GlobalInvocationID.xy)/imageSize(resultImage);
	vec2 texelSize = vec2(1.0); 

	vec2 srcUV = uv * imageSize(inputImage);
	
	vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;

    vec4 s;
    s =  imageLoad(inputImage,ivec2(srcUV - d.xy));
    s += imageLoad(inputImage,ivec2(srcUV - d.wy)) * 2.0;
    s += imageLoad(inputImage,ivec2(srcUV - d.zy));
						 
    s += imageLoad(inputImage,ivec2(srcUV + d.zw)) * 2.0;
    s += imageLoad(inputImage,ivec2(srcUV       )) * 4.0;
    s += imageLoad(inputImage,ivec2(srcUV + d.xw)) * 2.0;
						 
    s += imageLoad(inputImage,ivec2(srcUV + d.zy));
    s += imageLoad(inputImage,ivec2(srcUV + d.wy)) * 2.0;
    s += imageLoad(inputImage,ivec2(srcUV + d.xy));

	// additive
    res.rgba += s.rgba * (1.0 / 16.0);	
	res.a = clamp(res.a,0.0,1.0);

	 //Note: Store operations to any texel that is outside the boundaries of the bound image will do nothing.
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}
