#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : require

#include "shared_structs.h"
#include "instancing.shader"

layout (local_size_x = 128, local_size_y = 1) in;
layout(std430,set=0, binding = 1) buffer indirectCommands
{
    CustomIndirectCommand command_SSBO[];
};

layout(std430, set = 0, binding = 2) readonly buffer InstanceBuffer
{
	uvec4 InstanceData[];
};

layout(std430, set = 0, binding = 3) readonly buffer GPUScene
{
	GPUTransform GPUScene_SSBO[];
};

layout(push_constant)uniform PushCull
{
		CullingPC pc;
};

bool SphereOnOrForwardPlane(in vec3 pN, float pD, in vec3 spherePos, float sphereRad)
{
	float t = 0;
	float dist = dot(spherePos, pN) - pD;

	return dist < sphereRad;
}

bool SphereInFrustum(in vec4 top, in vec4 bottom,
					in vec4 right, in vec4 left,
					in vec4 pFar, in vec4 pNear,
					vec4 sphere)
{

						return (
		SphereOnOrForwardPlane(left.xyz,left.w,sphere.xyz,sphere.w) 
		&& SphereOnOrForwardPlane(right.xyz,right.w,sphere.xyz,sphere.w) 
		&& SphereOnOrForwardPlane(pFar.xyz,pFar.w,sphere.xyz,sphere.w) 
		&& SphereOnOrForwardPlane(pNear.xyz,pNear.w,sphere.xyz,sphere.w) 
		&& SphereOnOrForwardPlane(top.xyz,top.w,sphere.xyz,sphere.w) 
		&& SphereOnOrForwardPlane(bottom.xyz,bottom.w,sphere.xyz,sphere.w) 	
		);
}

void main()
{	
	uint idx = gl_GlobalInvocationID.x;
	
	if(idx < pc.numItems)
	{
		CustomIndirectCommand val = command_SSBO[idx];
		uint instanceID = val.firstInstance;
		uint transformIdx = InstanceData[instanceID].x;
		mat4 dInsMatrix = GPUTransformToMatrix4x4(GPUScene_SSBO[transformIdx]);

		float sx = length(vec3(dInsMatrix[0][0],dInsMatrix[1][0],dInsMatrix[2][0]));
		float sy = length(vec3(dInsMatrix[0][1],dInsMatrix[1][1],dInsMatrix[2][1]));
		float sz = length(vec3(dInsMatrix[0][2],dInsMatrix[1][2],dInsMatrix[2][2]));
		
		vec3 sphereCenter = vec3(dInsMatrix * vec4(val.sphere.xyz,1.0));
		float maxSize = max(sx,
								max(sy,sz));
		float sphereRadius = maxSize* val.sphere.w;

		bool show = bool(val.instanceCount) && SphereInFrustum(pc.top,pc.bottom,pc.right,pc.left,pc.pFar,pc.pNear,
									vec4(sphereCenter,sphereRadius));

		val.instanceCount = uint(show);

		command_SSBO[idx] = val;
	}
	
	
}
